# Docker Compose for FinSent Development Environment

version: '3.8'

services:
  # Main API service
  finsent-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/finsent
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
      - mlflow
    volumes:
      - ../models:/app/models
      - ../data:/app/data
      - ../logs:/app/logs
    restart: unless-stopped
    networks:
      - finsent-network

  # PostgreSQL database
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: finsent
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - finsent-network

  # Redis for caching
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - finsent-network

  # MLflow tracking server
  mlflow:
    image: python:3.9-slim
    ports:
      - "5000:5000"
    environment:
      - BACKEND_STORE_URI=postgresql://postgres:password@postgres:5432/mlflow
      - ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_data:/mlflow
      - ../mlflow-artifacts:/mlflow/artifacts
    command: >
      sh -c "pip install mlflow psycopg2-binary &&
             mlflow server --backend-store-uri postgresql://postgres:password@postgres:5432/mlflow
             --default-artifact-root /mlflow/artifacts
             --host 0.0.0.0 --port 5000"
    depends_on:
      - postgres
    networks:
      - finsent-network

  # Streamlit dashboard
  streamlit:
    build:
      context: ..
      dockerfile: docker/Dockerfile.streamlit
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://finsent-api:8000
    depends_on:
      - finsent-api
    volumes:
      - ../data:/app/data
    networks:
      - finsent-network

  # Jupyter notebook for development
  jupyter:
    image: jupyter/datascience-notebook:latest
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ../notebooks:/home/jovyan/work/notebooks
      - ../data:/home/jovyan/work/data
      - ../src:/home/jovyan/work/src
    command: start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''
    networks:
      - finsent-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - finsent-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - finsent-network

volumes:
  postgres_data:
  redis_data:
  mlflow_data:
  prometheus_data:
  grafana_data:

networks:
  finsent-network:
    driver: bridge

# TODO: Production configuration
# For production, consider:
# - External database connections
# - Load balancer configuration
# - SSL/TLS termination
# - Resource limits and scaling
# - Security hardening
